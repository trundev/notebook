name: Generate Jupyter notebook cell outputs

on:
  workflow_dispatch:
    inputs:
      SRC_REF:
        description: "Git commit reference to process"
        required: true
        default: ""
      DST_REF:
        description: "Tag to be created at the result commit"
        required: false
        default: ""
      RENDERER:
        description: "Plotly defaults renderer"
        required: false
        default: "notebook+plotly_mimetype+png"
  push:
    branches: [ master, '**-test' ]

env:
  SRC_REF: ''
  DST_REF: ''
  PLOTLY_RENDERER: 'plotly_mimetype+png'
  NOTEBOOK_FLT: '-Recurse *.ipynb'
  MASTER_BRANCH: 'refs/heads/master'
  GENERATED_BRANCH: 'generated'
  GENERATED_BRANCH_OLD: 'generated-old'

defaults:
  run:
    shell: pwsh

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
    - name: Process workflow_dispatch inputs
      if: github.event.inputs
      run: |
        echo "SRC_REF=${{ github.event.inputs.SRC_REF }}" >> ${env:GITHUB_ENV}
        echo "DST_REF=${{ github.event.inputs.DST_REF }}" >> ${env:GITHUB_ENV}
        echo "PLOTLY_RENDERER=${{ github.event.inputs.RENDERER }}" >> ${env:GITHUB_ENV}

    - uses: actions/checkout@v4
      with:
        ref: ${{ env.SRC_REF }}

    - name: Select output branch/tag name
      if: ${{! env.DST_REF }}
      run: |
        $DST_REF = "gen-$(git rev-parse --short HEAD)"
        echo "DST_REF=$DST_REF" >> ${env:GITHUB_ENV}
        echo "DST_REF set to $DST_REF"

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install Jupyter
      run: |
        pip install -r requirements.txt

    - name: Add job summary
      run: |
        "<details><summary>Workflow parameters</summary>

          | Variable   | Value |
          |------------|-------|
          | github.ref | ${{ github.ref }} |
          | SRC_REF    | ${{ env.SRC_REF }} |
          | DST_REF    | ${{ env.DST_REF }} |
          | PLOTLY_RENDERER | ${{ env.PLOTLY_RENDERER }} |
        </details>

        <details><summary>Installed packages</summary>

          | Package    | Version |
          |------------|---------|
        $(pip freeze | ForEach-Object {
          "  | $($_ -replace '==', ' | ' -replace ' @ ', ' | ') |"} |
          Join-String -Separator "`n")
        </details>
        " >> $env:GITHUB_STEP_SUMMARY

    - name: Execute Jupyter notebooks
      run: |
        $failed_files = @()
        foreach ($file in Get-ChildItem ${{ env.NOTEBOOK_FLT }}) {
          echo "Processing $($file.Name)..."
          "<details><summary>$($file.Name)</summary>
          " >> $env:GITHUB_STEP_SUMMARY
          '```' >> $env:GITHUB_STEP_SUMMARY
          jupyter nbconvert --to notebook --inplace --ExecutePreprocessor.timeout=300 --execute $file `
              2>&1 | Tee-Object -Append $env:GITHUB_STEP_SUMMARY
          '```
          </details>
          ' >> $env:GITHUB_STEP_SUMMARY
          if ($LASTEXITCODE) {
            $failed_files += $file
            "  > Failed, code: $LASTEXITCODE" >> $env:GITHUB_STEP_SUMMARY
          } else {
            git add $file
          }
        }
        if ($failed_files) {
          echo "FAILED_FILES=$(ConvertTo-Json $failed_files.Name)" >> $env:GITHUB_ENV
          echo "FAILED_FILES set to $($failed_files.Name)"
          $LASTEXITCODE=0   # Continue workflow-job anyway
        }

    - name: Commit to ${{ env.DST_REF }}
      run: |
        git branch ${{ env.DST_REF }}
        git checkout ${{ env.DST_REF }}
        $short_ref=$(git rev-parse --short HEAD)
        # Workaround: `+ ""` allows missing FAILED_FILES variable
        $failed_files = $env:FAILED_FILES + "" | ConvertFrom-Json
        git -c user.name="${{ github.actor }}" -c user.email="" commit -m "
        Auto-generated notebook cells from $short_ref

        Updated cell outputs in Jupyter notebooks from commit:
        ${{ github.server_url }}/${{ github.repository }}/tree/$short_ref
        $(if ($failed_files) {
          "Failed files:`n"
          $failed_files | ForEach-Object {"  $_`n"}
        })
        This is generated by GitHub action ID ${{ github.run_id }}"

    - name: Update "${{ env.GENERATED_BRANCH }}" branch
      id: make_gen
      if: github.ref == env.MASTER_BRANCH && github.event.pusher && !env.FAILED_FILES
      run: |
        git fetch origin refs/heads/${{ env.GENERATED_BRANCH }}
        if (!$LASTEXITCODE) {
          echo "Branch '${{ env.GENERATED_BRANCH }}' already exists renaming to '${{ env.GENERATED_BRANCH_OLD }}'"
          git push origin --delete refs/heads/${{ env.GENERATED_BRANCH_OLD }}
          git push origin refs/remotes/origin/${{ env.GENERATED_BRANCH }}:refs/heads/${{ env.GENERATED_BRANCH_OLD }}
          git push origin --delete refs/heads/${{ env.GENERATED_BRANCH }}
        }
        git branch ${{ env.GENERATED_BRANCH }}
        git push origin ${{ env.GENERATED_BRANCH }}

    - name: Push changes as tag ${{ env.DST_REF }}
      if: steps.make_gen.conclusion != 'success'
      run: |
        git tag ${{ env.DST_REF }}
        git push origin refs/tags/${{ env.DST_REF }}
        if ($LASTEXITCODE) {exit $LASTEXITCODE}

        "[Generated commit](${{ github.server_url }}/${{ github.repository }}/commit/${{ env.DST_REF }})" >> $env:GITHUB_STEP_SUMMARY
